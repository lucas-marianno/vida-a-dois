// Mocks generated by Mockito 5.4.4 from annotations
// in kanban/test/helper/mock_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:kanban/src/domain/entities/board_entity.dart' as _i6;
import 'package:kanban/src/domain/entities/task_entity.dart' as _i4;
import 'package:kanban/src/domain/repository/board_repository.dart' as _i5;
import 'package:kanban/src/domain/repository/task_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i2.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> createTask(_i4.Task? newTask) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [newTask],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Task>> readTasks() => (super.noSuchMethod(
        Invocation.method(
          #readTasks,
          [],
        ),
        returnValue: _i3.Stream<List<_i4.Task>>.empty(),
      ) as _i3.Stream<List<_i4.Task>>);

  @override
  _i3.Future<List<_i4.Task>> getTaskList() => (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i3.Future<List<_i4.Task>>);

  @override
  _i3.Future<void> updateTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [BoardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoardRepository extends _i1.Mock implements _i5.BoardRepository {
  MockBoardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Board>> getBoards() => (super.noSuchMethod(
        Invocation.method(
          #getBoards,
          [],
        ),
        returnValue: _i3.Future<List<_i6.Board>>.value(<_i6.Board>[]),
      ) as _i3.Future<List<_i6.Board>>);

  @override
  _i3.Stream<List<_i6.Board>> readBoards() => (super.noSuchMethod(
        Invocation.method(
          #readBoards,
          [],
        ),
        returnValue: _i3.Stream<List<_i6.Board>>.empty(),
      ) as _i3.Stream<List<_i6.Board>>);

  @override
  _i3.Future<void> updateBoards(List<_i6.Board>? boardsList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBoards,
          [boardsList],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
