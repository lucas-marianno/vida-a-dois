// Mocks generated by Mockito 5.4.4 from annotations
// in vida_a_dois/test/helper/mock_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:vida_a_dois/features/kanban/data/data_sources/board_data_source.dart'
    as _i10;
import 'package:vida_a_dois/features/kanban/data/data_sources/task_data_source.dart'
    as _i8;
import 'package:vida_a_dois/features/kanban/data/models/board_model.dart'
    as _i11;
import 'package:vida_a_dois/features/kanban/data/models/task_model.dart' as _i9;
import 'package:vida_a_dois/features/kanban/domain/entities/board_entity.dart'
    as _i7;
import 'package:vida_a_dois/features/kanban/domain/entities/task_entity.dart'
    as _i5;
import 'package:vida_a_dois/features/kanban/domain/repository/board_repository.dart'
    as _i6;
import 'package:vida_a_dois/features/kanban/domain/repository/task_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCollectionReference_0<T extends Object?> extends _i1.SmartFake
    implements _i2.CollectionReference<T> {
  _FakeCollectionReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_1<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentReference<T> {
  _FakeDocumentReference_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> createTask(_i5.Task? newTask) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [newTask],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<List<_i5.Task>> readTasks() => (super.noSuchMethod(
        Invocation.method(
          #readTasks,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.Task>>.empty(),
      ) as _i4.Stream<List<_i5.Task>>);

  @override
  _i4.Future<List<_i5.Task>> getTaskList() => (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue: _i4.Future<List<_i5.Task>>.value(<_i5.Task>[]),
      ) as _i4.Future<List<_i5.Task>>);

  @override
  _i4.Future<void> updateTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(_i5.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [BoardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoardRepository extends _i1.Mock implements _i6.BoardRepository {
  MockBoardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i7.Board>> getBoards() => (super.noSuchMethod(
        Invocation.method(
          #getBoards,
          [],
        ),
        returnValue: _i4.Future<List<_i7.Board>>.value(<_i7.Board>[]),
      ) as _i4.Future<List<_i7.Board>>);

  @override
  _i4.Stream<List<_i7.Board>> readBoards() => (super.noSuchMethod(
        Invocation.method(
          #readBoards,
          [],
        ),
        returnValue: _i4.Stream<List<_i7.Board>>.empty(),
      ) as _i4.Stream<List<_i7.Board>>);

  @override
  _i4.Future<void> updateBoards(List<_i7.Board>? boardsList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBoards,
          [boardsList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [TaskDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDataSource extends _i1.Mock implements _i8.TaskDataSource {
  MockTaskDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CollectionReference<Object?> get taskCollectionReference =>
      (super.noSuchMethod(
        Invocation.getter(#taskCollectionReference),
        returnValue: _FakeCollectionReference_0<Object?>(
          this,
          Invocation.getter(#taskCollectionReference),
        ),
      ) as _i2.CollectionReference<Object?>);

  @override
  _i4.Future<List<_i9.TaskModel>> getTaskList() => (super.noSuchMethod(
        Invocation.method(
          #getTaskList,
          [],
        ),
        returnValue: _i4.Future<List<_i9.TaskModel>>.value(<_i9.TaskModel>[]),
      ) as _i4.Future<List<_i9.TaskModel>>);

  @override
  _i4.Stream<List<_i9.TaskModel>> readTasks() => (super.noSuchMethod(
        Invocation.method(
          #readTasks,
          [],
        ),
        returnValue: _i4.Stream<List<_i9.TaskModel>>.empty(),
      ) as _i4.Stream<List<_i9.TaskModel>>);

  @override
  _i4.Future<void> createTask(_i9.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateTask(_i9.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteTask(_i9.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [task],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [BoardDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoardDataSource extends _i1.Mock implements _i10.BoardDataSource {
  MockBoardDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DocumentReference<Object?> get boardsDocReference => (super.noSuchMethod(
        Invocation.getter(#boardsDocReference),
        returnValue: _FakeDocumentReference_1<Object?>(
          this,
          Invocation.getter(#boardsDocReference),
        ),
      ) as _i2.DocumentReference<Object?>);

  @override
  _i4.Future<List<_i11.BoardModel>> getBoards() => (super.noSuchMethod(
        Invocation.method(
          #getBoards,
          [],
        ),
        returnValue:
            _i4.Future<List<_i11.BoardModel>>.value(<_i11.BoardModel>[]),
      ) as _i4.Future<List<_i11.BoardModel>>);

  @override
  _i4.Stream<List<_i11.BoardModel>> readBoards() => (super.noSuchMethod(
        Invocation.method(
          #readBoards,
          [],
        ),
        returnValue: _i4.Stream<List<_i11.BoardModel>>.empty(),
      ) as _i4.Stream<List<_i11.BoardModel>>);

  @override
  _i4.Future<void> updateBoards(List<_i11.BoardModel>? boardsList) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateBoards,
          [boardsList],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
